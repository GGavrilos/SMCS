library(ggplot2)
library(ggplot2bdc)
library(RColorBrewer)
mypalette<-brewer.pal(8,"Set1")[c(1,2,3)]
### Accumulated losses
#alph = 0.6
#beta=0.998
#gam = 0.008
#sigma = 1
n = 800
t=1:n
t1=154
t2=550
load("~/Desktop/EMCS/Plots_paper/Simulation3/MCS_one_simulation.rda")
df1 = data.frame("t"=t)
df1[,2]=1
df1[,3]=cumsum(export$L[,1])
df1[,4]= export$MCS[1,]
df2 = data.frame("t"=t)
df2[,2]=2
df2[,3]=cumsum(export$L[,2])
df2[,4]= export$MCS[2,]
df3 = data.frame("t"=t)
df3[,2]=3
df3[,3]=cumsum(export$L[,3])
df3[,4]= export$MCS[3,]
data1=rbind(df1,df2, df3)
colnames(data1)= c("t","model","loss","MCS")
data1$MCS[(data1$model==2) & (data1$MCS==1)] = 2
data1$MCS[(data1$model==3) & (data1$MCS==1)] = 3
tt = c(t[2:n],NA)
data1$tend=rep(tt,3)
data1$MCSend=data1$MCS
data1$model=as.factor(data1$model)
data1$model <- factor(data1$model, levels=c("1","2","3"),ordered=TRUE)
p1=ggplot(data=data1,aes(t,loss,color=model)) +
geom_line()+
coord_cartesian(ylim=c(0, 100))+
geom_vline(xintercept = c(t1,t2), size=0.5,alpha=0.5)+
xlab(substitute(paste(italic('t'))))+
theme_bw()+
theme(axis.title.y=element_blank(), #remove y axis labels
legend.title=element_blank(), #remove legend title
legend.key.width = unit(1, 'cm'))+#with of legend
scale_color_manual(values=mypalette)
p1
#export
ggsave_golden(path = "~/Desktop",
filename = "Sim3_one_realization_losses.pdf",plot=p1)
load("~/Dropbox/GitHub/Simulation_1/Version_Sebastian/freq_e_summarized.rda")
load("~/Dropbox/GitHub/Simulation_1/Version_Sebastian/size_e_summarized.rda")
n = 3000
plot(1:n,freq_e_summarized)
plot(1:n,freq_p_summarized)
load("~/Dropbox/GitHub/Simulation_1/Version_Sebastian/freq_p_summarized.rda")
plot(1:n,freq_p_summarized)
freq_p_summarized[1000]
freq_p_summarized[3000]
load("~/Dropbox/GitHub/Simulation_1/sim1_freq_e_summarized.rda")
load("~/Dropbox/GitHub/Simulation_1/sim1_freq_p_summarized.rda")
load("~/Dropbox/GitHub/Simulation_1/sim1_size_e_summarized.rda")
load("~/Dropbox/GitHub/Simulation_1/sim1_size_p_summarized.rda")
setwd("~/Dropbox/GitHub/Simulation_1")
freq_e_summarized[1:1000]
freq_e_summarized=freq_e_summarized[1:1000]
freq_p_summarized=freq_p_summarized[1:1000]
size_p_summarized=size_p_summarized[1:1000]
size_e_summarized=size_e_summarized[1:1000]
setwd("~/Dropbox/GitHub/Simulation_1")
save(size_e_summarized,file="sim1_size_e_summarized.rda")
save(size_p_summarized,file="sim1_size_p_summarized.rda")
save(freq_p_summarized,file="sim1_freq_p_summarized.rda")
save(freq_e_summarized,file="sim1_freq_e_summarized.rda")
# load packages and functions
library(MASS)
library(scoringRules)
source("Adjusting.R")
source("functions.R")
#-------------------------------------------------------------------------------
# Set parameters
alpha = 0.1 # confidence level
n = 1000 # sample size
epsilon = delta = seq(-0.6,0.6,length.out=7) # bias and dispersion erros
parameters = expand.grid(epsilon=epsilon, delta=delta)
# model number i, corresponds to the i-th row in parameters
eps = parameters$epsilon
delta= parameters$delta
ind_sup_model = which((eps==0)&(delta==0)) # indices of the superior model
set.seed(sim)
sim = 1
set.seed(sim)
#-------------------------------------------------------------------------------
# Simulate data
y = rep(NA,n)
y[1] = rnorm(1)
for (i in 2:n){
y[i]=rnorm(1,mean=y[i-1])
}
#-------------------------------------------------------------------------------
# Prepare objects to store
m = dim(parameters)[1] # number of models
L = matrix(NA,nrow=n,ncol=m) # to store the losses
means= c(0,y[1:(n-1)]) # true means
#-------------------------------------------------------------------------------
# Losses of models
for (i in 1:m){
L[,i]= crps_norm(y,mean=means+eps[i],sd=sqrt(1+delta[i]))
}
# At all Sundays, make the prediction of model 5 worse:
k = 7
tt = k*(1:floor(n/k))
rho = 0.3
L[tt,ind_sup_model]=crps_norm(y[tt],mean=means[tt]+rho,sd=sqrt(1+rho))
#-------------------------------------------------------------------------------
# Calculate c-values
c1= matrix(NA,ncol=m,nrow=m) # array to store the c parameters on weekdays
high = 1e10
for (i in 1:m){
for (j in (1:m)[-i]){
tmp = integer(0)
if (delta[i]!=delta[j]){
tmp = ((eps[i])*sqrt(1+delta[j])- (eps[j])*sqrt(1+delta[i]))/(sqrt(1+delta[j])-sqrt(1+delta[i]))
}
c1[i,j]= max(abs(
crps_norm(c(high,-high,tmp),mean=eps[i],sd=sqrt(1+delta[i]))-crps_norm(c(high,-high,tmp),mean=eps[j],sd=sqrt(1+delta[j]))))
}
}
c2 = c1
for (j in (1:m)[-ind_sup_model]){
tmp = ((0.3)*sqrt(1+delta[j])- (eps[j])*sqrt(1.3))/(sqrt(1+delta[j])-sqrt(1.3))
c2[ind_sup_model,j]= c2[j,ind_sup_model]= max(abs(
crps_norm(c(high,-high,tmp),mean=0.3,sd=sqrt(1.3))-crps_norm(c(high,-high,tmp),mean=eps[j],sd=sqrt(1+delta[j]))))
}
#-------------------------------------------------------------------------------
# Pairwise loss-differences
d =array(0, c(m,m,n))
for (i in 1:m){
for (j in (1:m)[-i]){
d[i,j,]= L[,i]- L[,j]
}
}
#-------------------------------------------------------------------------------
# Transformation to make loss-differences uniformly bounded
for (i in (1:n)[-tt]){
d[,,i]=d[,,i]/c1
}
for (i in tt){
d[,,i]=d[,,i]/c2
}
#-------------------------------------------------------------------------------
# Set uniform parameters
C=2
lambda= 1/(2*C)
psi_E_c = (-log(1-C*lambda)-C*lambda)/C^2
#-------------------------------------------------------------------------------
# Pairwise e-processes
Delta_hat=V=E=E_sup=array(0, c(m,m,n))
#' arrays to store the accumulated losses, the variance processes and the e-processes
for (i in 1:m){
for (j in (1:m)[-i]){
V[i,j,] = cumsum((d[i,j,]-cumsum(c(0,d[i,j,-n]))/c(1,1:(n-1)))^2)
Delta_hat[i,j,]=cumsum(d[i,j,])
E[i,j,]= exp(lambda*Delta_hat[i,j,]-psi_E_c*V[i,j,])
E_sup[i,j,]= cummax(E[i,j,]) # consider the running max
}
}
#-------------------------------------------------------------------------------
# e-based approach by the arithmetic mean
EE = E_adj = matrix(0, ncol = n, nrow = m)
for (i in 1:m){
EE[i,] = colMeans(E[i, -i,])
}
E_adj = apply(EE, 2, adj)
p_adj_inv = array(0, c(m, m, n))
for (t in 1:n){
p_adj_inv[, , t] = vector_to_matrix(adj_geom(matrix_to_vector(E_sup[, , t])))
}
MCS_p = MCS_e = rep(list(integer(0)), n)
names(MCS_e) = names(MCS_p) = paste0("t=", 1:n)
MCS_e[[1]]=MCS_p[[1]]=1:m
size_e = freq_e =size_p= freq_p = rep(NA, n)
size_e[1] = size_p[1] = m
freq_e[1] = freq_p[1] = 1
for (t in 2:n){
MCS_p[[t]]= which(rowSums(p_adj_inv[,,t] < 1/alpha) == m)
MCS_p[[t]] = MCS_p[[t]][is.element(MCS_p[[t]],MCS_p[[t-1]])]
size_p[t] = length(MCS_p[[t]])
freq_p[t] = is.element(ind_sup_model, MCS_p[[t]])
MCS_e[[t]]= which(E_adj[,t] < 1/alpha)
MCS_e[[t]] = MCS_e[[t]][is.element(MCS_e[[t]],MCS_e[[t-1]])]
size_e[t] = length(MCS_e[[t]])
freq_e[t] = is.element(ind_sup_model, MCS_e[[t]])
}
#-------------------------------------------------------------------------------
# Export-files
export = list("size_e" = size_e,
"freq_e"=freq_e,
"E_adj"=E_adj,
"size_p" = size_p,
"freq_p"=freq_p,
"p_adj_inv"=p_adj_inv)
pwd
!pwd
setwd("~/Desktop/EMCS/Plots_paper/Covid_V2/Results/Data_preparing")
load("~/Desktop/EMCS/Plots_paper/Covid_V2/Results/Data_preparing/padj_01.rda")
View(padj_01)
setwd("~/Desktop/EMCS/Plots_paper/Covid_V2/Results/Data_preparing")
n = 130
#' CDC_ensemble (1), 4_week_ensemble (2), baseline (3), ensemble (4), GT-deep (5),
#' mobs-gleam (6), psi-draft(7)
# "baseline(1), "MOBS-gleam(2), "PSI-draft(3), "GT-deep(4),"ensemble(5), "CDC-ensemble(6)
###############################################################################
################################ smart ######################################
###############################################################################
load("padj_01.rda")
df1 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="CDC-ensemble",
"MCS"=(1:n)<=padj_01$value[1],"quantile"=0.1,"method"="smart")
df3 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="baseline",
"MCS"=((1:n)<=padj_01$value[2]),"quantile"=0.1,"method"="smart")
df4 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="ensemble",
"MCS"=((1:n)<=padj_01$value[3]),"quantile"=0.1,"method"="smart")
df5 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="GT-deep",
"MCS"=((1:n)<=padj_01$value[4]),"quantile"=0.1,"method"="smart")
df6 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="MOBS-gleam",
"MCS"=((1:n)<=padj_01$value[5]),"quantile"=0.1,"method"="smart")
df7 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="PSI-draft",
"MCS"=((1:n)<=padj_01$value[6]),"quantile"=0.1,"method"="smart")
data1=rbind(df1,df3,df4,df5,df6,df7)
load("padj_03.rda")
df1 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="CDC-ensemble",
"MCS"=(1:n)<=padj_03$value[1],"quantile"=0.3,"method"="smart")
df3 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="baseline",
"MCS"=((1:n)<=padj_03$value[2]),"quantile"=0.3,"method"="smart")
df4 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="ensemble",
"MCS"=((1:n)<=padj_03$value[3]),"quantile"=0.3,"method"="smart")
df5 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="GT-deep",
"MCS"=((1:n)<=padj_03$value[4]),"quantile"=0.3,"method"="smart")
df6 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="MOBS-gleam",
"MCS"=((1:n)<=padj_03$value[5]),"quantile"=0.3,"method"="smart")
df7 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="PSI-draft",
"MCS"=((1:n)<=padj_03$value[6]),"quantile"=0.3,"method"="smart")
data2=rbind(df1,df3,df4,df5,df6,df7)
load("padj_05.rda")
df1 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="CDC-ensemble",
"MCS"=(1:n)<=padj_05$value[1],"quantile"=0.5,"method"="smart")
df3 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="baseline",
"MCS"=((1:n)<=padj_05$value[2]),"quantile"=0.5,"method"="smart")
df4 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="ensemble",
"MCS"=((1:n)<=padj_05$value[3]),"quantile"=0.5,"method"="smart")
df5 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="GT-deep",
"MCS"=((1:n)<=padj_05$value[4]),"quantile"=0.5,"method"="smart")
df6 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="MOBS-gleam",
"MCS"=((1:n)<=padj_05$value[5]),"quantile"=0.5,"method"="smart")
df7 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="PSI-draft",
"MCS"=((1:n)<=padj_05$value[6]),"quantile"=0.5,"method"="smart")
data3=rbind(df1,df3,df4,df5,df6,df7)
load("padj_07.rda")
df1 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="CDC-ensemble",
"MCS"=(1:n)<=padj_07$value[1],"quantile"=0.7,"method"="smart")
df3 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="baseline",
"MCS"=((1:n)<=padj_07$value[2]),"quantile"=0.7,"method"="smart")
df4 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="ensemble",
"MCS"=((1:n)<=padj_07$value[3]),"quantile"=0.7,"method"="smart")
df5 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="GT-deep",
"MCS"=((1:n)<=padj_07$value[4]),"quantile"=0.7,"method"="smart")
df6 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="MOBS-gleam",
"MCS"=((1:n)<=padj_07$value[5]),"quantile"=0.7,"method"="smart")
df7 = data.frame("x"=1:n,"x_end"=c(2:n,NA),"model"="PSI-draft",
"MCS"=((1:n)<=padj_07$value[6]),"quantile"=0.7,"method"="smart")
data4=rbind(df1,df3,df4,df5,df6,df7)
data=rbind(data1,data2,data3,data4)
data$MCS[which((data$model)=="MOBS-gleam")]=2*data$MCS[which((data$model)=="MOBS-gleam")]
data$MCS[which((data$model)=="PSI-draft")]=3*data$MCS[which((data$model)=="PSI-draft")]
data$MCS[which((data$model)=="GT-deep")]=4*data$MCS[which((data$model)=="GT-deep")]
data$MCS[which((data$model)=="ensemble")]=5*data$MCS[which((data$model)=="ensemble")]
data$MCS[which((data$model)=="CDC-ensemble")]=6*data$MCS[which((data$model)=="CDC-ensemble")]
data$model=as.factor(data$model)
data$model <- factor(data$model,
levels=c("baseline", "MOBS-gleam", "PSI-draft", "GT-deep","ensemble", "CDC-ensemble")
,ordered=TRUE)
save(data,file="data_summarized.rda")
library(ggplot2)
library(RColorBrewer)
library(cowplot)
library(rlang)
library(grid)
library(gridExtra)
library(ggpubr)
library(ggplot2bdc)
m=6
mypalette=brewer.pal(m,"Set1")
library(lubridate)
load("~/Desktop/EMCS/Plots_paper/Covid_V2/Results/truth.rda")
times= as.POSIXct(truth$target_end_date, format = "%Y-%m-%d", tz = "UTC")
years = year(times)
unique_years=ind=unique(years)[-1]
for (j in 1:length(unique_years)){ind[j] = min(which(years==unique_years[j]))}
load("~/Desktop/EMCS/Plots_paper/Covid_V2/Results/data_summarized.rda")
p1= ggplot(subset(data,quantile==0.1), aes(x=x, y=MCS, xend=x_end, yend=MCS,color=model)) +
geom_segment(linewidth=10,alpha=1)+
coord_cartesian(ylim=c(0.9,6.1)) +
labs(title=expression(tau~"=0.1"))+
scale_y_continuous(breaks=1:6,labels=rep("",6))+
scale_x_continuous(breaks=ind,labels=unique_years)+
theme_bw()+
theme(axis.title.y=element_blank(),axis.title.x=element_blank())+ #remove y axis labels
theme(legend.position = "none")+
scale_color_manual(values=mypalette)
p2= ggplot(subset(data,quantile==0.3), aes(x=x, y=MCS, xend=x_end, yend=MCS,color=model)) +
geom_segment(linewidth=10,alpha=1)+
coord_cartesian(ylim=c(0.9,6.1)) +
labs(title=expression(tau~"=0.3"))+
scale_y_continuous(breaks=1:6,labels=rep("",6))+
scale_x_continuous(breaks=ind,labels=unique_years)+
theme_bw()+
theme(axis.title.y=element_blank(),axis.title.x=element_blank())+ #remove y axis labels
theme(legend.position = "none")+
scale_color_manual(values=mypalette)
p3= ggplot(subset(data,quantile==0.5), aes(x=x, y=MCS, xend=x_end, yend=MCS,color=model)) +
geom_segment(linewidth=10,alpha=1)+
coord_cartesian(ylim=c(0.9,6.1)) +
labs(title=expression(tau~"=0.5"))+
scale_y_continuous(breaks=1:6,labels=rep("",6))+
scale_x_continuous(breaks=ind,labels=unique_years)+
theme_bw()+
theme(axis.title.y=element_blank(),axis.title.x=element_blank())+ #remove y axis labels
theme(legend.position = "none")+
scale_color_manual(values=mypalette)
p4= ggplot(subset(data,quantile==0.7), aes(x=x, y=MCS, xend=x_end, yend=MCS,color=model)) +
geom_segment(linewidth=10,alpha=1)+
coord_cartesian(ylim=c(0.9,6.1)) +
labs(title=expression(tau~"=0.7"))+
scale_y_continuous(breaks=1:6,labels=rep("",6))+
scale_x_continuous(breaks=ind,labels=unique_years)+
theme_bw()+
theme(axis.title.y=element_blank(),axis.title.x=element_blank())+ #remove y axis labels
theme(legend.position = "none")+
scale_color_manual(values=mypalette)
# call last plot to extract legend
p5= ggplot(subset(data,quantile==0.5), aes(x=x, y=MCS, xend=x_end, yend=MCS,color=model)) +
geom_segment(linewidth=10,alpha=1)+
coord_cartesian(ylim=c(0.9,6.1)) +
labs(title=expression(tau~"=0.9"))+
scale_y_continuous(breaks=1:6,labels=rep("",6))+
scale_x_continuous(breaks=ind,labels=unique_years)+
theme_bw()+
theme(axis.title.y=element_blank(),axis.title.x=element_blank())+ #remove y axis labels
scale_color_manual(values=mypalette)
p5
setwd("~/Desktop/EMCS/Plots_paper/Covid_V2/Results")
legend_b = get_legend(p5+
guides(color=guide_legend(nrow=1))+
theme(legend.title=element_blank(),
legend.position = "bottom"))
legend = as_ggplot(legend_b)
legend+theme(legend.box.margin=margin(c(0,0,0,0)))
setwd("~/Desktop/EMCS/Plots_paper/Covid")
ggsave("Covid_legend.pdf", width = 8, height = 0.8)
setwd("~/Desktop/EMCS/Plots_paper/Covid_V2/Results")
ggsave("Covid_legend.pdf", width = 8, height = 0.8)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid",
filename = "covid_results_p_based1.pdf",plot=p1)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid",
filename = "covid_results_p_based2.pdf",plot=p2)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid",
filename = "covid_results_p_based3.pdf",plot=p3)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid",
filename = "covid_results_p_based4.pdf",plot=p4)
setwd("~/Desktop/EMCS/Plots_paper/Covid_V2/Results")
ggsave_golden(path = "",
filename = "covid_results_p_based1.pdf",plot=p1)
setwd("~/Desktop/EMCS/Plots_paper/Covid_V2/Results")
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid_V2/Results",
filename = "covid_results_p_based1.pdf",plot=p1)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid_V2/Results",
filename = "covid_results_p_based1.pdf",plot=p1)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid_V2/Results",
filename = "covid_results_p_based2.pdf",plot=p2)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid_V2/Results",
filename = "covid_results_p_based3.pdf",plot=p3)
ggsave_golden(path = "~/Desktop/EMCS/Plots_paper/Covid_V2/Results",
filename = "covid_results_p_based4.pdf",plot=p4)
load("~/Dropbox/GitHub/MSE_Simulation/size_e_summarized.rda")
load("~/Dropbox/GitHub/MSE_Simulation/size_p_summarized.rda")
n= 1000
plot(1:n,size_e_summarized,type="l")
lines(1:n,size_e_summarized,type="l",col="red")
lines(1:n,size_p_summarized,type="l",col="red")
plot(1:n,size_p_summarized,type="l")
lines(1:n,size_e_summarized,type="l",col="red")
load("~/Dropbox/GitHub/MSE_Simulation/freq_p_summarized.rda")
plot(1:n,freq_p_summarized,type="l")
load("~/Dropbox/GitHub/MSE_Simulation/p_adj_summarized.rda")
str(p_adj_summarized)
load("~/Dropbox/GitHub/MSE_Simulation/p_adj_summarized.rda")
load("~/Dropbox/GitHub/MSE_Simulation/E_adj_summarized.rda")
library(RColorBrewer)
m=9
mycol = brewer.pal(m, "Set1")
str(E_adj_summarized)
plot(1:n,E_adj_summarized[1,],type="l",col=mycol[1],ylim=c(0,max(E_adj_summarized)))
for (i in 2:m){
lines(1:n,E_adj_summarized[i,],type="l",col=mycol[i])
}
plot(1:n,log(E_adj_summarized[1,]),type="l",col=mycol[1],ylim=c(0,max(log(E_adj_summarized))))
for (i in 2:m){
lines(1:n,log(E_adj_summarized[i,]),type="l",col=mycol[i])
}
n = 1000
plot(1:n,log(E_adj_summarized[1,]),type="l",col=mycol[1],ylim=c(min(log(E_adj_summarized)),max(log(E_adj_summarized))))
for (i in 2:m){
lines(1:n,log(E_adj_summarized[i,]),type="l",col=mycol[i])
}
legend(x=0,y=-20,legend=1:m,col=mycol,lty=rep(1,m))
alpha = 0.1 # confidence level
n = 1000 # sample size
epsilon = delta = seq(-0.5,0.5,length.out=3) # bias and dispersion erros
parameters = expand.grid(epsilon=epsilon, delta=delta)
# model number i, corresponds to the i-th row in parameters
eps = parameters$epsilon
delta= parameters$delta
ind_sup_model = which((eps==0)&(delta==min(delta))) # indices of the superior model
parameters
plot(1:n,p_adj_summarized[1,2,],type="l",col=mycol[1],ylim=c(0,max(p_adj_summarized)))
p_adj_summarized[1,2,]
plot(1:n,p_adj_summarized[1,2,],type="l",col=mycol[1],ylim=c(0,1)))
plot(1:n,p_adj_summarized[1,2,],type="l",col=mycol[1],ylim=c(0,1))
abline(h=0.1)
for (i in 3:m){
lines(1:n,p_adj_summarized[1,i,],type="l",col=mycol[i])
}
plot(1:n,p_adj_summarized[4,2,],type="l",col=mycol[2],ylim=c(0,1))
for (i in 3:m){
lines(1:n,p_adj_summarized[4,i,],type="l",col=mycol[i])
}
abline(h=0.1)
plot(1:n,p_adj_summarized[7,2,],type="l",col=mycol[2],ylim=c(0,1))
for (i in 3:m){
lines(1:n,p_adj_summarized[4,i,],type="l",col=mycol[i])
}
abline(h=0.1)
plot(1:n,p_adj_summarized[9,2,],type="l",col=mycol[2],ylim=c(0,1))
for (i in 3:m){
lines(1:n,p_adj_summarized[4,i,],type="l",col=mycol[i])
}
abline(h=0.1)
load("~/Dropbox/GitHub/MSE_Simulation/p_adj_summarized.rda")
load("~/Dropbox/GitHub/MSE_Simulation/E_adj_summarized.rda")
ind = 1
rem_ind = (1:m)[-ind]
plot(1:n,p_adj_summarized[ind,rem_ind[1],],type="l",col=mycol[rem_ind[1]],ylim=c(0,1))
for (i in rem_ind){
lines(1:n,p_adj_summarized[ind,i,],type="l",col=mycol[i])
}
abline(h=0.1)
ind = 3
rem_ind = (1:m)[-ind]
plot(1:n,p_adj_summarized[ind,rem_ind[1],],type="l",col=mycol[rem_ind[1]],ylim=c(0,1))
for (i in rem_ind){
lines(1:n,p_adj_summarized[ind,i,],type="l",col=mycol[i])
}
abline(h=0.1)
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind])
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind],lty=(1,rep(length(rem_ind))))
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind],lty=rep(1,length(rem_ind))))
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind],lty=rep(1,length(rem_ind)))
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind],lty=rep(1,length(rem_ind)),cex=0.5)
ind = 3
rem_ind = (1:m)[-ind]
plot(1:n,p_adj_summarized[ind,rem_ind[1],],type="l",col=mycol[rem_ind[1]],ylim=c(0,1),main=paste("d",ind,"j"))
rem_ind
i = 1
lines(1:n,p_adj_summarized[ind,i,],type="l",col=mycol[i])
ind = 3
rem_ind = (1:m)[-ind]
plot(1:n,p_adj_summarized[ind,rem_ind[1],],type="l",col=mycol[rem_ind[1]],ylim=c(0,1),main=paste0("d",ind,"j"))
for (i in rem_ind){
lines(1:n,p_adj_summarized[ind,i,],type="l",col=mycol[i])
}
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind],lty=rep(1,length(rem_ind)),cex=0.5)
abline(h=0.1)
ind = 2
rem_ind = (1:m)[-ind]
plot(1:n,p_adj_summarized[ind,rem_ind[1],],type="l",col=mycol[rem_ind[1]],ylim=c(0,1),main=paste0("d",ind,"j"))
for (i in rem_ind){
lines(1:n,p_adj_summarized[ind,i,],type="l",col=mycol[i])
}
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind],lty=rep(1,length(rem_ind)),cex=0.5)
abline(h=0.1)
ind = 8
rem_ind = (1:m)[-ind]
plot(1:n,p_adj_summarized[ind,rem_ind[1],],type="l",col=mycol[rem_ind[1]],ylim=c(0,1),main=paste0("d",ind,"j"))
for (i in rem_ind){
lines(1:n,p_adj_summarized[ind,i,],type="l",col=mycol[i])
}
legend(x=0,y=0.5,legend=rem_ind,col=mycol[rem_ind],lty=rep(1,length(rem_ind)),cex=0.5)
abline(h=0.1)
