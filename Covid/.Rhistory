setwd("~/Dropbox/GitHub/Plots/Simulations1&2")
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim1_size_e_summarized.rda")
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim2_size_2e_summarized.rda")
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim2_size_2p_summarized.rda")
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim1_size_p_summarized.rda")
setwd("~/Dropbox/GitHub/Plots/Simulations1&2")
#Simulation 1, e-processes
load("sim1_size_e_summarized.rda")
data1 <- data.frame(
index = 1:1000,
value = size_e_summarized,
sim = "Simulation 1e"
)
# Simulation 2, e-processes
load("sim2_size_2e_summarized.rda")
data2 <- data.frame(
index = 1:1000,
value = size_2e_summarized,
sim = "Simulation 2e"
)
# Simulation 2, p-processes
load("sim2_size_2p_summarized.rda")
data3 <- data.frame(
index = 1:1000,
value = size_2p_summarized,
sim = "Simulation 2p"
)
# Simulation 1, p-processes
load("sim1_size_p_summarized.rda")
data4 <- data.frame(
index = 1:1000,
value = size_p_summarized,
sim = "Simulation 1p"
)
library(ggplot2)
library(ggplot2bdc)
# combined_plot
data= rbind(data1,data2,data3,data4)
data$sim = as.factor(data$sim)
data$sim = factor(data$sim, levels=c("Simulation 1e","Simulation 2e","Simulation 1p","Simulation 2p"),ordered=TRUE)
data$group <- ifelse(grepl("1", data$sim), "Simulation 1", "Simulation 2")
data$style <- ifelse(grepl("p$", data$sim), "p", "e")  # distinguish 'p' and 'e'
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = group,
linetype = style,
linewidth = style)) +  # linewidth maps to style
xlab(substitute(paste(italic('t')))) +
ggtitle("Average size of the SMCS") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Simulation 1" = "#1b9e77", "Simulation 2" = "#d95f02")) +
scale_linetype_manual(values = c("e" = "dashed", "p" = "solid"), guide = "none") +
scale_linewidth_manual(values = c("e" = 0.5, "p" = 1.2), guide = "none")
p
View(data)
View(data1)
sum(is.na(data))
library(ggplot2)
library(ggplot2bdc)
#library(dplyr)
n=1000
#Simulation 1, e-processes
load("sim1_size_e_summarized.rda")
size_e_summarized = size_e_summarized[1:n] #plot only 1000 first data points
data1 <- data.frame(
index = 1:1000,
value = size_e_summarized,
sim = "Simulation 1",
style = "e"
)
# Simulation 2, e-processes
load("sim2_size_2e_summarized.rda")
size_2e_summarized=size_2e_summarized[1:n]#plot only 1000 first data points
data2 <- data.frame(
index = 1:1000,
value = size_2e_summarized,
sim = "Simulation 2",
style = "e"
)
# Simulation 2, p-processes
load("sim2_size_2p_summarized.rda")
size_2p_summarized = size_2p_summarized[1:n]#plot only 1000 first data points
data3 <- data.frame(
index = 1:1000,
value = size_2p_summarized,
sim = "Simulation 2",
style = "p"
)
# Simulation 1, p-processes
load("sim1_size_p_summarized.rda")
size_p_summarized = size_p_summarized[1:1000]#plot only 1000 first data points
data4 <- data.frame(
index = 1:1000,
value = size_p_summarized,
sim = "Simulation 1",
style = "p"
)
# combined_plot
data= rbind(data1,data2,data3,data4)
data$sim = as.factor(data$sim)
data$sim = factor(data$sim, levels=c("Simulation 1","Simulation 2"),ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = sim,
linetype = style,
linewidth = style)) +  # linewidth maps to style
xlab(substitute(paste(italic('t')))) +
ggtitle("Average size of the SMCS") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Simulation 1" = "#1b9e77", "Simulation 2" = "#d95f02")) +
scale_linetype_manual(values = c("e" = "dashed", "p" = "solid"), guide = "none") +
scale_linewidth_manual(values = c("e" = 0.5, "p" = 1.2), guide = "none")
p
setwd("~/Dropbox/GitHub/Plots/Simulations1&2")
ggsave_golden(path = "~/Dropbox/GitHub/Plots/Simulations1&2",
filename = "Simulations1&2.pdf",plot=p)
#Simulation 1, e-processes
load("sim1_freq_e_summarized.rda")
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim1_freq_e_summarized.rda")
freq_e_summarized = freq_e_summarized[1:n] #plot only 1000 first data points
n=1000
freq_e_summarized = freq_e_summarized[1:n] #plot only 1000 first data points
data1 <- data.frame(
index = 1:1000,
value = size_e_summarized,
sim = "Simulation 1",
style = "e"
)
data1 <- data.frame(
index = 1:1000,
value = freq_e_summarized,
sim = "Simulation 1",
style = "e"
)
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim2_freq_2e_summarized.rda")
freq_2e_summarized=freq_2e_summarized[1:n]#plot only 1000 first data points
data2 <- data.frame(
index = 1:1000,
value = freq_2e_summarized,
sim = "Simulation 2",
style = "e"
)
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim2_freq_2p_summarized.rda")
freq_2p_summarized=freq_2p_summarized[1:1000]#plot only 1000 first data points
data3 <- data.frame(
index = 1:1000,
value = freq_2p_summarized,
sim = "Simulation 2",
style = "p"
)
load("~/Dropbox/GitHub/Plots/Simulations1&2/sim1_freq_p_summarized.rda")
freq_p_summarized=freq_p_summarized[1:1000]#plot only 1000 first data points
data4 <- data.frame(
index = 1:1000,
value = freq_p_summarized,
sim = "Simulation 1",
style = "p"
)
# combined_plot
data= rbind(data1,data2,data3,data4)
data$sim = as.factor(data$sim)
data$sim = factor(data$sim, levels=c("Simulation 1","Simulation 2"),ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = sim,
linetype = style,
linewidth = style)) +  # linewidth maps to style
xlab(substitute(paste(italic('t')))) +
ggtitle("Average size of the SMCS") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Simulation 1" = "#1b9e77", "Simulation 2" = "#d95f02")) +
scale_linetype_manual(values = c("e" = "dashed", "p" = "solid"), guide = "none") +
scale_linewidth_manual(values = c("e" = 0.5, "p" = 1.2), guide = "none")
p
ggsave_golden(path = "~/Dropbox/GitHub/Plots/Simulations1&2",
filename = "Simulations1&2_freq.pdf",plot=p)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = sim,
linetype = style,
linewidth = style)) +  # linewidth maps to style
xlab(substitute(paste(italic('t')))) +
ggtitle("Coverage of the superior model") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Simulation 1" = "#1b9e77", "Simulation 2" = "#d95f02")) +
scale_linetype_manual(values = c("e" = "dashed", "p" = "solid"), guide = "none") +
scale_linewidth_manual(values = c("e" = 0.5, "p" = 1.2), guide = "none")
p
ggsave_golden(path = "~/Dropbox/GitHub/Plots/Simulations1&2",
filename = "Simulations1&2_freq.pdf",plot=p)
setwd("~/Dropbox/GitHub/Plots/Simulations1&2")
library(ggplot2)
library(ggplot2bdc)
#library(dplyr)
n=1000
#Simulation 1, e-processes
load("sim1_freq_e_summarized.rda")
freq_e_summarized = freq_e_summarized[1:n] #plot only 1000 first data points
data1 <- data.frame(
index = 1:1000,
value = freq_e_summarized,
sim = "Simulation 1",
style = "e"
)
# Simulation 2, e-processes
load("sim2_freq_2e_summarized.rda")
freq_2e_summarized=freq_2e_summarized[1:n]#plot only 1000 first data points
data2 <- data.frame(
index = 1:1000,
value = freq_2e_summarized,
sim = "Simulation 2",
style = "e"
)
# Simulation 2, p-processes
load("sim2_freq_2p_summarized.rda")
freq_2p_summarized=freq_2p_summarized[1:1000]#plot only 1000 first data points
data3 <- data.frame(
index = 1:1000,
value = freq_2p_summarized,
sim = "Simulation 2",
style = "p"
)
# Simulation 1, p-processes
load("sim1_freq_p_summarized.rda")
freq_p_summarized=freq_p_summarized[1:1000]#plot only 1000 first data points
data4 <- data.frame(
index = 1:1000,
value = freq_p_summarized,
sim = "Simulation 1",
style = "p"
)
# combined_plot
data= rbind(data1,data2,data3,data4)
data$sim = as.factor(data$sim)
data$sim = factor(data$sim, levels=c("Simulation 1","Simulation 2"),ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = sim,
linetype = style,
linewidth = style)) +  # linewidth maps to style
xlab(substitute(paste(italic('t')))) +
ggtitle("Coverage of the superior model") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 12)) +
scale_color_manual(values = c("Simulation 1" = "#1b9e77", "Simulation 2" = "#d95f02")) +
scale_linetype_manual(values = c("e" = "dashed", "p" = "solid"), guide = "none") +
scale_linewidth_manual(values = c("e" = 0.5, "p" = 1.2), guide = "none")
p
ggsave_golden(path = "~/Dropbox/GitHub/Plots/Simulations1&2",
filename = "Simulations1&2_freq.pdf",plot=p)
setwd("~/Dropbox/GitHub/Covid")
library(dplyr)
load("forecasts_death.rda")
load("truth.rda")
source("preprocessing.R")
library(ggplot2)
# Specify the desired quantiles. #
selected_quantiles <- c(0.15, 0.5, 0.975)
selected_models <- c("GT-deep", "baseline", "ensemble", "truth")
# Plot the point forecasts in normal and log scale. #
# Filter out all other models. #
filtered_data <- forecasts_truth %>%
filter(quantile %in% selected_quantiles, model %in% selected_models)
# Create a new variable for log-transformed values. #
filtered_data$log_value <- log(filtered_data$value)
# Plot deaths in linear scale. #
death_linear <-
ggplot(subset(filtered_data, quantile == 0.5), aes(x = target_end_date, y = value, color = model)) +
geom_line() +
scale_color_manual(values = c("GT-deep" = "red3", "baseline" = "forestgreen", "ensemble" = "yellow3", "truth" = "black")) +
xlab(NULL) +
ylab(NULL) +
theme_minimal() +
theme(legend.position = "none",
legend.title = element_blank(),
panel.grid.major = element_line(linetype = 'solid', colour = "gray"),
panel.grid.minor = element_line(linetype = 'solid', colour = "gray"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
legend.text = element_text(size = 22),
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),  # Increase x-axis title size
axis.title.y = element_text(size = 22),
strip.text = element_text(size = 22),
text = element_text(family = "Palatino"),
plot.title = element_text(size = 16)) +
labs(title = "Covid-19 related deaths in linear scale")
death_log <-
ggplot(subset(filtered_data, quantile == 0.5), aes(x = target_end_date, y = log_value, color = model)) +
geom_line() +
scale_color_manual(values = c("GT-deep" = "red3", "baseline" = "forestgreen", "ensemble" = "yellow3", "truth" = "black")) +
xlab(NULL) +
ylab(NULL) +
theme_minimal() +
theme(legend.position = "none",
legend.title = element_blank(),
panel.grid.major = element_line(linetype = 'solid', colour = "gray"),
panel.grid.minor = element_line(linetype = 'solid', colour = "gray"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
legend.text = element_text(size = 22),
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),  # Increase x-axis title size
axis.title.y = element_text(size = 22),
strip.text = element_text(size = 22),
text = element_text(family = "Palatino"),
plot.title = element_text(size = 16)) +
labs(title = "Covid-19 related deaths in logarithmic scale")
# First for tau = 0.15. #
forecasts_015 <-
ggplot(subset(filtered_data, quantile == 0.15), aes(x = target_end_date, y = log_value, color = model)) +
geom_line() +
scale_color_manual(values = c("GT-deep" = "red3", "baseline" = "forestgreen", "ensemble" = "yellow3")) +
xlab(NULL) +
ylab(NULL) +
theme_minimal() +
theme(legend.position = "none",
legend.title = element_blank(),
panel.grid.major = element_line(linetype = 'solid', colour = "gray"),
panel.grid.minor = element_line(linetype = 'solid', colour = "gray"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
legend.text = element_text(size = 22),
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),  # Increase x-axis title size
axis.title.y = element_text(size = 22),
strip.text = element_text(size = 22),
text = element_text(family = "Palatino"),
plot.title = element_text(size = 16)) +
labs(title = "Forecasts for \u03C4 = 0.15")
# Now for tau = 0.9. #
forecasts_0975 <-
ggplot(subset(filtered_data, quantile == 0.975), aes(x = target_end_date, y = log_value, color = model)) +
geom_line() +
scale_color_manual(values = c("GT-deep" = "red3", "baseline" = "forestgreen", "ensemble" = "yellow3")) +
xlab(NULL) +
ylab(NULL) +
theme_minimal() +
theme(legend.position = "none",
legend.title = element_blank(),
panel.grid.major = element_line(linetype = 'solid', colour = "gray"),
panel.grid.minor = element_line(linetype = 'solid', colour = "gray"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
legend.text = element_text(size = 22),
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),  # Increase x-axis title size
axis.title.y = element_text(size = 22),
strip.text = element_text(size = 22),
text = element_text(family = "Palatino"),
plot.title = element_text(size = 16)) +
labs(title = "Forecasts for \u03C4 = 0.9")
## Combine all subplots in a panel of four. #
library(patchwork) # install.packages("patchwork")
install.packages("patchwork")
library(patchwork) # install.packages("patchwork")
library(cowplot)
combined_plot <- death_linear + death_log + forecasts_015 + forecasts_0975
## Design the legend. #
common_legend <- ggplot(filtered_data, aes(color = factor(model))) +
geom_point() +
labs(title = NULL)
# Add the legend to the combined plot. #
combined_plot <- combined_plot + plot_layout(
plot_layout(guides = "collect"),
plot_layout(common_legend + theme(legend.position = "bottom")),
ncol = 2
)
combined_plot
