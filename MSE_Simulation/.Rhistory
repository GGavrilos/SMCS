value = E_adj_summarized[1,],
model = 1
)
for (i in 1:m){
data= rbind(data,data.frame(
index = 1:n,
value = E_adj_summarized[i,],
model = 1))
}
View(data)
load("E_adj_summarized.rda")
n=1000
data = data.frame(
index=1:n,
value = E_adj_summarized[1,],
model = 1
)
for (i in 1:m){
df=  data.frame(
index = 1:n,
value = E_adj_summarized[i,],
model = i)
data= rbind(data,df)
}
load("E_adj_summarized.rda")
n=1000
data = data.frame(
index=1:n,
value = E_adj_summarized[1,],
model = 1
)
for (i in 2:m){
df=  data.frame(
index = 1:n,
value = E_adj_summarized[i,],
model = i)
data= rbind(data,df)
}
data$model = as.factor(data$model)
data$model = factor(data$model,#, levels=c("e-based","p-based"),
ordered=TRUE)
m=9
mycol = brewer.pal(m, "Set1")
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model) +
xlab(substitute(paste(italic('t')))) +
ggtitle("Average size of the SMCS") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol))
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ggtitle("Average size of the SMCS") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
load("E_adj_summarized.rda")
n=1000
data = data.frame(
index=1:n,
value = log(E_adj_summarized[1,]),
model = 1
)
for (i in 2:m){
df=  data.frame(
index = 1:n,
value = log(E_adj_summarized[i,]),
model = i)
data= rbind(data,df)
}
data$model = as.factor(data$model)
data$model = factor(data$model,#, levels=c("e-based","p-based"),
ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ggtitle("E-processes") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('t')))) +
ggtitle("E-processes") +
theme_bw() +
theme(axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('t')))) +
ggtitle("E-processes") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
ggtitle("E-processes") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
load("E_adj_summarized.rda")
n=1000
data = data.frame(
index=1:n,
value = log(E_adj_summarized[1,]),
model = 1
)
for (i in 3:m){
df=  data.frame(
index = 1:n,
value = log(E_adj_summarized[i,]),
model = i)
data= rbind(data,df)
}
data$model = as.factor(data$model)
data$model = factor(data$model,#, levels=c("e-based","p-based"),
ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
ggtitle("E-processes") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 1)+
geom_vline()+
ggtitle("E-processes") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 1)+
ggtitle("E-processes") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("E-processes") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
#geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("E-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
#geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("E-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("E-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(-20, 20))
p
load("E_adj_summarized.rda")
n=1000
data = data.frame(
index=1:n,
value = log(E_adj_summarized[1,]),
model = 1
)
for (i in 2:m){
df=  data.frame(
index = 1:n,
value = log(E_adj_summarized[i,]),
model = i)
data= rbind(data,df)
}
data$model = as.factor(data$model)
data$model = factor(data$model,#, levels=c("e-based","p-based"),
ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("E-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(-20, 20))
p
ggsave_golden(path = "~/Dropbox/GitHub/MSE_Simulation",
filename = "e-processes.pdf",plot=p)
m=9
load("~/Dropbox/GitHub/MSE_Simulation/p_adj_summarized.rda")
load("p_adj_summarized.rda")
n=1000
data = data.frame(
index=1:n,
value = p_adj_summarized[1,2,],
model = 1
)
df=  data.frame(
index = 1:n,
value = p_adj_summarized[2,5,],
model = 2)
data= rbind(data,df)
for (i in 3:m){
df=  data.frame(
index = 1:n,
value = p_adj_summarized[i,2,],
model = i)
data= rbind(data,df)
}
data$model = as.factor(data$model)
data$model = factor(data$model,#, levels=c("e-based","p-based"),
ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('p_t')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(-20, 20))
m=9
mycol = brewer.pal(m, "Set1")
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('p_t')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(-20, 20))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('p_t')))) +
geom_hline(yintercept = 0.1, color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(0, 1))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(expression(p[t])) +
geom_hline(yintercept = 0.1, color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(0, 1))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(expression(p[i,j,t])) +
geom_hline(yintercept = 0.1, color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(0, 1))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(expression(p[t])) +
geom_hline(yintercept = 0.1, color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
scale_x_continuous(expand = c(0, 0))+
coord_cartesian(ylim = c(0, 1))
p
ggsave_golden(path = "~/Dropbox/GitHub/MSE_Simulation",
filename = "p-processes.pdf",plot=p)
library(ggplot2)
library(ggplot2bdc)
library(RColorBrewer)
#----------------------- define the colours -------
m=9
mycol = brewer.pal(m, "Set1")
load("E_adj_summarized.rda")
n=1000
data = data.frame(
index=1:n,
value = log(E_adj_summarized[1,]),
model = 1
)
for (i in 2:m){
df=  data.frame(
index = 1:n,
value = log(E_adj_summarized[i,]),
model = i)
data= rbind(data,df)
}
data$model = as.factor(data$model)
data$model = factor(data$model,#, levels=c("e-based","p-based"),
ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("E-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
coord_cartesian(ylim = c(-20, 20))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(substitute(paste(italic('log(E)')))) +
geom_hline(yintercept = log(1/0.1), color = "black", linetype = "dashed", size = 0.1)+
ggtitle("E-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
coord_cartesian(ylim = c(-15, 20))
p
setwd("~/Dropbox/GitHub/MSE_Simulation")
ggsave_golden(path = "~/Dropbox/GitHub/MSE_Simulation",
filename = "e-processes.pdf",plot=p)
load("p_adj_summarized.rda")
mycol = mycol[-2]
n=1000
data = data.frame(
index=1:n,
value = p_adj_summarized[1,2,],
model = 1
)
#df=  data.frame(
#  index = 1:n,
#  value = p_adj_summarized[2,5,],
#  model = 2)
#data= rbind(data,df)
for (i in 3:m){
df=  data.frame(
index = 1:n,
value = p_adj_summarized[i,2,],
model = i)
data= rbind(data,df)
}
data$model = as.factor(data$model)
data$model = factor(data$model,ordered=TRUE)
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(expression(p[t])) +
geom_hline(yintercept = 0.1, color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
coord_cartesian(ylim = c(0, 1))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(expression(p[t])) +
geom_hline(yintercept = 0.1, color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
coord_cartesian(ylim = c(0, 7.5))
p
p <- ggplot(data = data) +
geom_line(aes(x = index, y = value,
colour = model)) +
xlab(substitute(paste(italic('t')))) +
ylab(expression(p[t])) +
geom_hline(yintercept = 0.1, color = "black", linetype = "dashed", size = 0.1)+
ggtitle("p-processes") +
theme_bw() +
guides(color = guide_legend(nrow = 1)) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = mycol)+
coord_cartesian(ylim = c(0, 0.75))
p
ggsave_golden(path = "~/Dropbox/GitHub/MSE_Simulation",
filename = "p-processes.pdf",plot=p)
epsilon = delta = seq(-0.5,0.5,length.out=3) # bias and dispersion erros
parameters = expand.grid(epsilon=epsilon, delta=delta)
# model number i, corresponds to the i-th row in parameters
eps = parameters$epsilon
delta= parameters$delta
ind_sup_model = which((eps==0)&(delta==min(delta))) # indices of the superior model
paramters
parameters
